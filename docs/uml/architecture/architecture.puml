@startuml

'skinparam linetype ortho
skinparam linetype polyline
'skinparam monochrome true

skinparam package {
    backgroundColor lightgrey
}

skinparam component {
	BackgroundColor<<FXML>> LightGreen
	ArrowColor<<FXML>> DarkBlue
	BorderColor<<FXML>> DarkBlue
}


package mtRooms {
    frame "Presentation Layer" #lightblue {
        package "ui" {
            component MtRoomsGUI
            component SessionManager

            component MainWindow #white {
                component MainWindowController
                component MainWindow <<FXML>> as MainWindowView

                MainWindowController -- MainWindowView
            }

            component LoginPane #white {
                component LoginController
                component LoginView <<FXML>> as LoginView

                LoginController -- LoginView
            }


            component FrontDeskPane #white {
                IFrontDeskController -- [FrontDeskController]
                IReservationView -- [ReservationView]
                IPaymentView -- [PaymentView]

                FrontDeskController --( IReservationView
                FrontDeskController --( IPaymentView
            }

            component AdministrationPane #white {
                IAdminViewController -- [AdminViewController]
                IUserAccountView -- [UserAccountView]
                ICustomerAccountView -- [CustomerAccountView]

                AdminViewController --( IUserAccountView
                AdminViewController --( ICustomerAccountView
            }

            component LogisticsPane #white {
                ILogisticsViewController -- [LogisticsViewController]
                ILogisticsReportView -- [LogisticsReportView]

                LogisticsViewController --( ILogisticsReportView
            }

            component RevenuePane #white {
                IRevenueViewController -- [RevenueViewController]
                IInvoiceView -- [InvoiceView]
                IRevenueReportView -- [RevenueReportView]

                RevenueViewController --( IInvoiceView
                RevenueViewController --( IRevenueReportView
            }

            MtRoomsGUI --> SessionManager

            MtRoomsGUI -down-> MainWindow
            MainWindow *-down- LoginPane
            MainWindow *--down- FrontDeskPane
            MainWindow *--down-- AdministrationPane
            MainWindow *--down-- LogisticsPane
            MainWindow *--down-- RevenuePane

        }
    }

    frame "network layer" #yellow {
        frame "client" #white {
            IClient -- [RmiClient]
        }

        frame RMIRegistry as RMIRegistry #white {
            interface IRmiServices
            interface IRmiClient
        }

        frame "server" #white {
            package "network" {
                [<u>:ClientWrapper] as ClientWrapper
                [<u>:RmiServer] as RmiServer
                component RmiServices
                component ClientSessions
                component EventWatcherDelegate
                IClientWrapper -- ClientWrapper

                RmiServices --( IClientWrapper
                RmiServer --|> RmiServices
                ClientWrapper -* ClientSessions
                EventWatcherDelegate - ClientSessions
            }

        }

        ClientWrapper --( IRmiClient
        RmiServices *-- ClientSessions
'        RmiClient --( IRmiServices
        RmiClient -- IRmiClient
        IRmiServices -- RmiServices
    }

    frame "Service Layer" #lightgreen {
        package "uaa" {
            ISessionDriver -- [SessionDriver]
            [Authenticator]
            [FrontDeskDelegate]
            IAuthenticatedFrontDesk -- [AuthenticatedFrontDesk]
            [AdministrationDelegate]
            IAuthenticatedAdministration -- [AuthenticatedAdministration]
            [RevenuePersonnelDelegate]
            IAuthenticatedRevenuePersonnel -- [AuthenticatedRevenuePersonnel]
            [LogisticsPersonnelDelegate]
            IAuthenticatedLogisticsPersonnel -- [AuthenticatedLogisticsPersonnel]

            AuthenticatedFrontDesk --> Authenticator
            AuthenticatedFrontDesk --> FrontDeskDelegate
            SessionDriver --> Authenticator
            AuthenticatedAdministration --> Authenticator
            AuthenticatedAdministration --> AdministrationDelegate
            AuthenticatedLogisticsPersonnel --> Authenticator
            AuthenticatedLogisticsPersonnel --> LogisticsPersonnelDelegate
            AuthenticatedRevenuePersonnel --> Authenticator
            AuthenticatedRevenuePersonnel --> RevenuePersonnelDelegate

            SessionDriver *- AuthenticatedFrontDesk
            SessionDriver *- AuthenticatedAdministration
            SessionDriver *- AuthenticatedRevenuePersonnel
            SessionDriver *- AuthenticatedLogisticsPersonnel
        }
    }

    frame "Business Logic Layer" #orange {
        package "reservation" {
            component ReservationSystem #white {
                interface IEventWatcher
                interface IReservationSession
                interface ICustomerAccount
                interface IPay
                interface IReserve
                interface ISearch
                interface IScheduleNotify
                component [<u>:ReservationSession] <<Observer>> as ReservationSession
                component [ScheduleCache] <<Observable>> as ScheduleCache
                component [Schedule] <<Datastructure>> as Schedule
                component OptimisedSearch
                component ReservationProcessing
                component PaymentProcessing
                component CustomerAccountAccess
                component ReservationDbDelegate

                IReservationSession -- ReservationSession
                IPay -- ReservationDbDelegate
                IReserve -- ReservationDbDelegate
                ISearch -- ReservationDbDelegate
                ICustomerAccount -- ReservationDbDelegate
                IScheduleNotify ---- ScheduleCache

                ScheduleCache *- Schedule
                ReservationSession -up-( IEventWatcher
                ReservationSession --> OptimisedSearch
                ReservationSession --> PaymentProcessing
                ReservationSession --> ReservationProcessing
                ReservationSession --> CustomerAccountAccess
                OptimisedSearch --> ScheduleCache
                ReservationSession --( IScheduleNotify
                ReservationProcessing --> ScheduleCache

                OptimisedSearch --( ISearch
                ReservationProcessing  --( IReserve
                CustomerAccountAccess   --( ICustomerAccount
                PaymentProcessing --( IPay
            }
        }

        package "revenue" {
            component RevenueSystem #white {
                IRevenueReporter -- [ReportCreator]
                [RevenueAggregator]

                ReportCreator --> RevenueAggregator
            }

            component InvoiceSystem #white {
                IInvoice -- [InvoiceCreator]
                [InvoiceAggregator]
                [Mailer]

                InvoiceCreator --> InvoiceAggregator
                InvoiceCreator --> Mailer
            }
        }

        package "operation" {
            component LogisticsSystem #white {
                interface ILogisticReportGenerator
                component LogisticReportGenerator
                component LogisticAggregator

                ILogisticReportGenerator -- LogisticReportGenerator
                LogisticReportGenerator --> LogisticAggregator
            }
        }

        package "admin" {
            component AdministrationSystem #white {
                interface IAdminSession
                component AdminSession
                component UserAccAdministration
                component ReservationDbMaintenance

                IAdminSession -- AdminSession
                AdminSession --> UserAccAdministration
                AdminSession --> ReservationDbMaintenance
            }

            component AuthenticationSystem #white {
                interface IAuthenticationSystem
                component UserAccountChecker
                component SessionIdGenerator

                IAuthenticationSystem -- UserAccountChecker
                UserAccountChecker --> SessionIdGenerator
            }
        }
    }

    frame "Data Layer" #purple {
        package "db" {
            component ReservationDbAccessSystem #white {
                package "database" {
                    database SQLiteDB as DB
                    IReservationDB -- [Database]
                    IUserAccDB -- [Database]
                    IReservationDB ..> IDatabase
                    IUserAccDB ..> IDatabase
                    [DatabaseBuilder]
                    [DatabaseChecker]

                    [Database] -down- DB
                    [Database] --> DatabaseBuilder
                    [Database] --> DatabaseChecker
                }
                package "session" {
                    [<u>:SessionTracker] as SessionTracker
                    ICurrentSessions -- [SessionTracker]
                }

                IReservationDbAccess -- [ReservationDbAccess]
                IUserAccDbAccess -- [UserAccDbAccess]
                IDatabaseSystemBootstrap -- [DbSystemBootstrap]

                DbSystemBootstrap *-left- ReservationDbAccess
                DbSystemBootstrap *-right- UserAccDbAccess
                ReservationDbAccess --( ICurrentSessions
                ReservationDbAccess --( IReservationDB
                UserAccDbAccess --( IUserAccDB
                UserAccDbAccess --( ICurrentSessions
            }
        }
    }

    '##-------------------------------##
    '## Presentation to Network Layer ##
    '##-------------------------------##
    SessionManager --( IRmiServices
    SessionManager --( IClient
'    ReservationView --( IAuthenticatedFrontDesk
'    PaymentView --( IAuthenticatedFrontDesk
'
'    UserAccountView --( IAuthenticatedAdministration
'    CustomerAccountView --( IAuthenticatedAdministration
'
'    LogisticsReportView --( IAuthenticatedLogisticsPersonnel
'
'    InvoiceView --( IAuthenticatedRevenuePersonnel
'    RevenueReportView --( IAuthenticatedRevenuePersonnel

    '##--------------------------##
    '## Network to Service Layer ##
    '##--------------------------##

    RmiServices -down-( ISessionDriver
    ClientWrapper -down-( IAuthenticatedFrontDesk
    ClientWrapper -down-( IAuthenticatedAdministration
    ClientWrapper -down-( IAuthenticatedRevenuePersonnel
    ClientWrapper -down-( IAuthenticatedLogisticsPersonnel
    EventWatcherDelegate .. IEventWatcher

    '##---------------------------------##
    '## Service to Business Logic Layer ##
    '##---------------------------------##
    AdministrationDelegate --( IAdminSession

    Authenticator --( IAuthenticationSystem

    FrontDeskDelegate --( IReservationSession

    RevenuePersonnelDelegate --( IRevenueReporter
    RevenuePersonnelDelegate --( IInvoice

    LogisticsPersonnelDelegate --( ILogisticReportGenerator

    '##------------------------------##
    '## Business Logic to Data Layer ##
    '##------------------------------##
    UserAccountChecker --( IUserAccDbAccess

    UserAccAdministration --( IUserAccDbAccess
    ReservationDbMaintenance --( IReservationDbAccess

    ReservationDbDelegate --( IReservationDbAccess

    LogisticAggregator --( IReservationDbAccess
    InvoiceAggregator --( IReservationDbAccess
    RevenueAggregator --( IReservationDbAccess
}

@enduml